brain-url: brain://89D75462-5434-0395-12D7-FE6F0CC3F6EB/34008AE0-93A0-DDC3-2A4A-22CC30127097/NoSQL
branch-color: 51,204,204
created: 20151114071141614
creator: Mark Robbins
desc: More flexible, faster data retrieval.  [[MongoDB]], [[CouchDB]], [[Firebase]]
icon-web: nosql.png
modified: 20151117152157859
modifier: Mark Robbins
subhead: Non relational databases
tags: SQL
title: NoSQL
tmap.id: b510356a-17f1-4804-af73-de9d10b0f01f

<<masthead-reveal """
A ''~NoSQL'' (originally referring to "non SQL" or "non relational") database provides a mechanism for storage and retrieval of data that is modeled in means other than the tabular relations used in relational databases. Such databases have existed since the late 1960s, but did not obtain the "~NoSQL" moniker until a surge of popularity in the early twenty-first century, triggered by the needs of Web 2.0 companies such as Facebook, Google and Amazon.com.
<br/><br/>
Motivations for this approach include: simplicity of design, simpler "horizontal" scaling to clusters of machines, which is a problem for relational databases, and finer control over availability. The data structures used by ''~NoSQL'' databases (e.g. key-value, graph, or document) differ slightly from those used by default in relational databases, making some operations faster in ''~NoSQL'' and others faster in relational databases. The particular suitability of a given ''~NoSQL'' database depends on the problem it must solve. Sometimes the data structures used by ''~NoSQL'' databases are also viewed as "more flexible" than relational database tables.
<br/><br/>

''~NoSQL'' databases are increasingly used in big data and real-time web applications. ''~NoSQL'' systems are also sometimes called "Not only SQL" to emphasize that they may support [[SQL]]-like query languages.
<br/><br/>

Many ''~NoSQL'' stores compromise consistency (in the sense of the CAP theorem) in favor of availability, partition tolerance, and speed. Barriers to the greater adoption of ''~NoSQL'' stores include the use of low-level query languages (instead of [[SQL]], for instance the lack of ability to perform ad-hoc JOIN's across tables), lack of standardized interfaces, and huge previous investments in existing relational databases. Most ''~NoSQL'' stores lack true ACID transactions, although a few recent systems, such as ~FairCom c-treeACE, Google Spanner (though technically a ~NewSQL database), ~FoundationDB, Symas LMDB and ~OrientDB have made them central to their designs. Instead they offer a concept of "eventual consistency" in which database changes are propagated to all nodes "eventually" (typically within milliseconds) so queries for data might not return updated data immediately.
<br/><br/>

Not all ''~NoSQL'' systems live up to the promised "eventual consistency" and partition tolerance, but in experiments with network partitioning often exhibited lost writes and other forms of data loss. Fortunately, some ''~NoSQL'' systems provide concepts such as Write-ahead logging to avoid data loss. Current relational databases also "do not allow referential integrity constraints to span databases" as well.
<br/><br/>

[[Wikipedia|https://en.wikipedia.org/wiki/NoSQL]]
""">>
<div class="sector">

!!Navigate
</div>

<$macrocall $name="brancher" goto="SQL"/>
